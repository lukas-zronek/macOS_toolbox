#!/bin/sh

cc=clang
cflags='-I.'
exec=toolbox
extern_path=extern

declarations=
entry_points=
combined_objs=
ldflags=

xcode_path=$(xcode-select -p 2> /dev/null)

if [ ! $? -eq 0 ] || [ -z "$xcode_path" ] || [ "$xcode_path" = /Library/Developer/CommandLineTools ]
then
	printf "Error: Xcode is not installed.\n" 1>&2
	exit 1
fi

if [ "$1" = clean ]
then
	for d in "$extern_path"/*/*.xcodeproj
	do
		if [ -d "$d" ]
		then
			xcodebuild -project "$d" clean
		fi
	done

	rm -f *.o gen/progs.h gen/*_main.c log/*.txt "$exec"

	exit 0
fi

while IFS=, read -r project aliases flags
do
	prog=$(echo "$aliases" | cut -f1 -d' ')

	echo Building "$aliases"

	project_path=$extern_path/$project

	xcodebuild -project "$project_path"/"$project".xcodeproj -target "$prog" &> log/"$prog".txt

	exit=$?

	linkfilelist=$(echo $project_path/build/$project.build/Release/$prog.build/Objects-normal/x86_64/*.LinkFileList)

	if [ ! -e "$linkfilelist" ]; then
		printf 'Error: xcodebuild failed (exit: %d)\n' "$exit" 1>&2
		exit 1
	fi

	objs=$(tr '\n' ' ' < $linkfilelist)

	sed s/%NAME%/"$prog"/ main_wrap.c.tpl > gen/"$prog"_main.c
	$cc $cflags -c gen/"$prog"_main.c

	for name in $aliases
	do
		declarations="$declarations extern int ${prog}_main();"
		entry_points="$entry_points {\"$name\", ${prog}_main},"
	done

	$cc $cflags -nostdlib -Wl,-r,-exported_symbol,_"$prog"_main -o "$prog"_combined.o $objs "$prog"_main.o

	combined_objs="$combined_objs ${prog}_combined.o"

	if [ ! -z "$flags" ]
	then
		ldflags="$ldflags $flags"
	fi
done < progs.txt

sed -e s/%DECLARATIONS%/"$declarations"/ -e s/%ENTRY_POINTS%/"$entry_points"/ progs.h.tpl > gen/progs.h

echo LDFLAGS: $ldflags

$cc $cflags -c main.c
$cc $cflags $ldflags $combined_objs main.o -o "$exec"
